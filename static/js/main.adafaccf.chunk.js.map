{"version":3,"sources":["components/Main/Main.module.css","components/App/App.module.css","components/Preloader/Preloader.module.css","history/history.js","constants/api.js","reducers/preloaderReducer.js","reducers/reducers.js","constants/actionTypes.js","store/configureStore.js","store/localStorage.js","serviceWorker.js","constants/routing.js","components/App/App.js","actions/fileActions.js","actions/preloaderActions.js","components/Main/Main.js","constants/colors.js","components/Preloader/Preloader.js","components/Main/MainContainer.js","routes.js","index.js"],"names":["module","exports","Main","Dropzone","App","Preloader","browserHistory","useRouterHistory","createHistory","basename","initialState","showPreloader","reducers","combineReducers","routing","routerReducer","preloader","state","arguments","length","undefined","action","type","Object","objectSpread","payload","configureStore","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","logger","createLogger","router","routerMiddleware","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","throttle","stringify","setItem","_unused","saveState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","props","children","react_default","a","createElement","id","className","styles","onDropFiles","acceptedFiles","rejectedFiles","dispatch","startFilesProcessing","finishFilesProcessing","context","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnDrop","bind","assertThisInitialized","dist_es","onDrop","Component","preloaderColors","react_md_spinner_esm","size","color1","colors","color2","color3","color4","MainContainer","components_Main_Main","components_Preloader_Preloader","getMainComponent","getPreloaderComponent","connect","bindActionCreators","routes","react_router_es","path","component","to","history","syncHistoryWithStore","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","es","BrowserRouter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adafaccf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__22WzM\",\"Dropzone\":\"Main_Dropzone__2bibF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__tzqGW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Preloader\":\"Preloader_Preloader__PcQp7\"};","import {useRouterHistory} from 'react-router';\r\nimport {createHistory} from 'history';\r\n\r\nimport * as api from '../constants/api';\r\n\r\nexport const browserHistory = useRouterHistory(createHistory)({\r\n    basename: api.BASE_URL\r\n});\r\n","export const BASE_URL = \"/file.stream.app\";\r\n","import * as types from '../constants/actionTypes';\r\n\r\nconst initialState = {\r\n    showPreloader: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.START_PRELOADER_TYPE: {\r\n            return {\r\n                ...state,\r\n                showPreloader: action.payload\r\n            }\r\n        }\r\n        case types.FINISH_PRELOADER_TYPE: {\r\n            return {\r\n                ...state,\r\n                showPreloader: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport {routerReducer} from 'react-router-redux';\r\n\r\nimport preloaderReducer from './preloaderReducer';\r\n\r\nconst reducers = combineReducers({\r\n    routing: routerReducer,\r\n    preloader: preloaderReducer,\r\n});\r\n\r\nexport default reducers;\r\n","export const START_FILES_PROCESSING_TYPE = \"START_FILES_PROCESSING_TYPE\";\r\nexport const FINISH_FILES_PROCESSING_TYPE = \"FINISH_FILES_PROCESSING_TYPE\";\r\nexport const START_PRELOADER_TYPE = \"START_PRELOADER_TYPE\";\r\nexport const FINISH_PRELOADER_TYPE = \"FINISH_PRELOADER_TYPE\";\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport {routerMiddleware} from 'react-router-redux';\r\nimport throttle from 'lodash.throttle';\r\n\r\nimport {loadState, saveState} from './localStorage';\r\nimport {browserHistory} from '../history/history';\r\nimport reducers from '../reducers/reducers';\r\n\r\nconst configureStore = () => {\r\n    const persistedState = loadState();\r\n    const logger = createLogger();\r\n    const router = routerMiddleware(browserHistory);\r\n    const store = createStore(reducers, persistedState, composeWithDevTools(applyMiddleware(thunk, logger, router)));\r\n    store.subscribe(throttle(() => {\r\n        saveState({});\r\n    }, 1000));\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (module.hot) {\r\n            module.hot.accept(\"../reducers/reducers\", () => {\r\n                store.replaceReducer(reducers);\r\n            });\r\n        }\r\n    }\r\n    return store;\r\n};\r\n\r\nexport default configureStore;\r\n","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem(\"state\");\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = state => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"state\", serializedState);\r\n    } catch {\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","export const ROOT_ROUTE = \"/\";\r\nexport const MAIN_ROUTE = \"/main\";\r\nexport const OTHER_ROUTE = \"*\";\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './App.module.css';\r\n\r\nconst App = props => {\r\n    const {children} = props;\r\n    return (\r\n        <div id={\"App\"}\r\n             className={styles.App}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    children: PropTypes.element.isRequired\r\n};\r\n\r\nexport default App;\r\n","import * as types from '../constants/actionTypes';\r\n\r\nimport {startPreloader, finishPreloader} from './preloaderActions';\r\n\r\nexport const onDropFiles = (acceptedFiles, rejectedFiles) => dispatch => {\r\n    dispatch(startPreloader());\r\n    dispatch(startFilesProcessing());\r\n    console.log(\"Accepted files:\", acceptedFiles);\r\n    console.log(\"Rejected files:\", rejectedFiles);\r\n    dispatch(finishFilesProcessing());\r\n    dispatch(finishPreloader());\r\n};\r\n\r\nconst startFilesProcessing = () => {\r\n    return {\r\n        type: types.START_FILES_PROCESSING_TYPE\r\n    }\r\n};\r\n\r\nconst finishFilesProcessing = () => {\r\n    return {\r\n        type: types.FINISH_FILES_PROCESSING_TYPE\r\n    }\r\n};\r\n","import * as types from '../constants/actionTypes';\r\n\r\nexport const startPreloader = () => {\r\n    return {\r\n        type: types.START_PRELOADER_TYPE,\r\n        payload: true\r\n    }\r\n};\r\n\r\nexport const finishPreloader = () => {\r\n    return {\r\n        type: types.FINISH_PRELOADER_TYPE,\r\n        payload: false\r\n    }\r\n};\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nimport styles from './Main.module.css';\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.handleOnDrop = this.handleOnDrop.bind(this);\r\n    }\r\n\r\n    handleOnDrop(acceptedFiles, rejectedFiles) {\r\n        const {onDropFiles} = this.props;\r\n        onDropFiles(acceptedFiles, rejectedFiles);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"Main\"}\r\n                 className={styles.Main}>\r\n                <Dropzone onDrop={this.handleOnDrop}\r\n                          className={styles.Dropzone}>\r\n                    Drop file's here\r\n                </Dropzone>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMain.propTypes = {\r\n    onDropFiles: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Main;\r\n","export const preloaderColors = [\r\n    '#aaffaa',\r\n    '#008800',\r\n    '#ffaa00',\r\n    '#ff0000',\r\n];\r\n","import React from 'react';\r\nimport MDSpinner from 'react-md-spinner';\r\n\r\nimport styles from './Preloader.module.css';\r\n\r\nimport * as colors from '../../constants/colors';\r\n\r\nconst Preloader = () => (\r\n    <div id={\"Preloader\"}\r\n         className={styles.Preloader}>\r\n        <MDSpinner size={48}\r\n                   color1={colors.preloaderColors[0]}\r\n                   color2={colors.preloaderColors[1]}\r\n                   color3={colors.preloaderColors[2]}\r\n                   color4={colors.preloaderColors[3]}/>\r\n    </div>\r\n);\r\n\r\nexport default Preloader;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {onDropFiles} from '../../actions/fileActions';\r\nimport Main from './Main';\r\nimport Preloader from '../Preloader/Preloader';\r\n\r\nclass MainContainer extends Component {\r\n\r\n    getMainComponent() {\r\n        const {onDropFiles} = this.props;\r\n        return <Main onDropFiles={onDropFiles}/>\r\n    }\r\n\r\n    getPreloaderComponent() {\r\n        const {preloader} = this.props;\r\n        if (preloader.showPreloader) {\r\n            return <Preloader/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"MainContainer\"}>\r\n                {this.getMainComponent()}\r\n                {this.getPreloaderComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        preloader: state.preloader\r\n    };\r\n}\r\n\r\nfunction matchDispatchToProps(dispatch) {\r\n    return bindActionCreators({\r\n        onDropFiles\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(MainContainer);\r\n","import React from 'react';\r\nimport {Route, IndexRedirect} from 'react-router';\r\n\r\nimport * as routing from './constants/routing';\r\nimport App from './components/App/App';\r\nimport MainContainer from './components/Main/MainContainer';\r\n\r\nexport default (\r\n    <div>\r\n        <Route path={routing.ROOT_ROUTE} component={App}>\r\n            <IndexRedirect to={routing.MAIN_ROUTE}/>\r\n            <Route path={routing.MAIN_ROUTE} component={MainContainer}/>\r\n            <Route path={routing.OTHER_ROUTE} component={MainContainer}/>\r\n        </Route>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {syncHistoryWithStore} from 'react-router-redux';\r\nimport {Router} from 'react-router';\r\n\r\nimport configureStore from './store/configureStore';\r\nimport {browserHistory} from './history/history';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport routes from './routes';\r\n\r\nconst store = configureStore();\r\nconst history = syncHistoryWithStore(browserHistory, store);\r\n\r\nserviceWorker.register();\r\n\r\nconst component = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <Router history={history}>\r\n                {routes}\r\n            </Router>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(component, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}