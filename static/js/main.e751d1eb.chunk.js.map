{"version":3,"sources":["components/App/App.module.css","history/history.js","constants/api.js","reducers/reducers.js","store/configureStore.js","store/localStorage.js","serviceWorker.js","constants/routing.js","components/App/App.js","components/Main/MainContainer.js","routes.js","index.js"],"names":["module","exports","App","browserHistory","useRouterHistory","createHistory","basename","reducers","combineReducers","routing","routerReducer","configureStore","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","logger","createLogger","router","routerMiddleware","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","throttle","state","stringify","setItem","_unused","saveState","Boolean","window","location","hostname","match","props","children","react_default","a","createElement","id","className","styles","MainContainer","Component","connect","dispatch","bindActionCreators","routes","react_router_es","path","component","to","history","syncHistoryWithStore","navigator","serviceWorker","ready","then","registration","unregister","es","BrowserRouter","ReactDOM","render","document","getElementById"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,IAAA,0NCILC,EAAiBC,YAAiBC,gBAAjBD,CAAgC,CAC1DE,SCNoB,qBCOTC,EAJEC,0BAAgB,CAC7BC,QAASC,kBCyBEC,EAlBQ,WACnB,IAAMC,ECZe,WACrB,IACI,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QDImBC,GACjBC,EAASC,yBACTC,EAASC,2BAAiBpB,GAC1BqB,EAAQC,sBAAYlB,EAAUK,EAAgBc,8BAAoBC,0BAAgBC,IAAOR,EAAQE,KAWvG,OAVAE,EAAMK,UAAUC,IAAS,YCJJ,SAAAC,GACrB,IACI,IAAMlB,EAAkBG,KAAKgB,UAAUD,GACvCjB,aAAamB,QAAQ,QAASpB,GAChC,MAAAqB,KDCEC,CAAU,KACX,MAQIX,GEdSY,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DClBD,qBCmBQtC,EAdH,SAAAuC,GAAS,IACVC,EAAYD,EAAZC,SACP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAI,MACJC,UAAWC,IAAO9C,KAClBwC,4CCNPO,mLAGE,OACIN,EAAAC,EAAAC,cAAA,OAAKC,GAAI,iBAAT,eAJgBI,aAmBbC,kBARf,SAAyBpB,GACrB,MAAO,IAGX,SAA8BqB,GAC1B,OAAOC,6BAAmB,GAAID,IAGnBD,CAA+CF,GCf1DK,EAAAX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KHTW,IGSeC,UAAWvD,GACxCyC,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAeG,GHTD,UGUdf,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KHVO,QGUmBC,UAAWR,IAC5CN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KHVQ,IGUmBC,UAAWR,MCAnDzB,EAAQb,IACRgD,EAAUC,+BAAqBzD,EAAgBqB,GLoH7C,kBAAmBqC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC,eKlHzB,IAAMT,EACFd,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAU3C,MAAOA,GACbmB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACIzB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQI,QAASA,GACZL,KAMjBe,IAASC,OAAOb,EAAWc,SAASC,eAAe","file":"static/js/main.e751d1eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2mUJM\"};","import {useRouterHistory} from 'react-router';\r\nimport {createHistory} from 'history';\r\n\r\nimport * as api from '../constants/api';\r\n\r\nexport const browserHistory = useRouterHistory(createHistory)({\r\n    basename: api.BASE_URL\r\n});\r\n","export const BASE_URL = \"/file.stream.app\";\r\n","import {combineReducers} from 'redux';\r\nimport {routerReducer} from 'react-router-redux';\r\n\r\nconst reducers = combineReducers({\r\n    routing: routerReducer,\r\n});\r\n\r\nexport default reducers;\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport {routerMiddleware} from 'react-router-redux';\r\nimport throttle from 'lodash.throttle';\r\n\r\nimport {loadState, saveState} from './localStorage';\r\nimport {browserHistory} from '../history/history';\r\nimport reducers from '../reducers/reducers';\r\n\r\nconst configureStore = () => {\r\n    const persistedState = loadState();\r\n    const logger = createLogger();\r\n    const router = routerMiddleware(browserHistory);\r\n    const store = createStore(reducers, persistedState, composeWithDevTools(applyMiddleware(thunk, logger, router)));\r\n    store.subscribe(throttle(() => {\r\n        saveState({});\r\n    }, 1000));\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (module.hot) {\r\n            module.hot.accept(\"../reducers/reducers\", () => {\r\n                store.replaceReducer(reducers);\r\n            });\r\n        }\r\n    }\r\n    return store;\r\n};\r\n\r\nexport default configureStore;\r\n","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem(\"state\");\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = state => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"state\", serializedState);\r\n    } catch {\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","export const ROOT_ROUTE = \"/\";\r\nexport const MAIN_ROUTE = \"/main\";\r\nexport const OTHER_ROUTE = \"*\";\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './App.module.css';\r\n\r\nconst App = props => {\r\n    const {children} = props;\r\n    return (\r\n        <div id={\"App\"}\r\n             className={styles.App}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    children: PropTypes.element.isRequired\r\n};\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nclass MainContainer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"MainContainer\"}>\r\n                MAIN\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {};\r\n}\r\n\r\nfunction matchDispatchToProps(dispatch) {\r\n    return bindActionCreators({}, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(MainContainer);\r\n","import React from 'react';\r\nimport {Route, IndexRedirect} from 'react-router';\r\n\r\nimport * as routing from './constants/routing';\r\nimport App from './components/App/App';\r\nimport MainContainer from './components/Main/MainContainer';\r\n\r\nexport default (\r\n    <div>\r\n        <Route path={routing.ROOT_ROUTE} component={App}>\r\n            <IndexRedirect to={routing.MAIN_ROUTE}/>\r\n            <Route path={routing.MAIN_ROUTE} component={MainContainer}/>\r\n            <Route path={routing.OTHER_ROUTE} component={MainContainer}/>\r\n        </Route>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {syncHistoryWithStore} from 'react-router-redux';\r\nimport {Router} from 'react-router';\r\n\r\nimport configureStore from './store/configureStore';\r\nimport {browserHistory} from './history/history';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport routes from './routes';\r\n\r\nconst store = configureStore();\r\nconst history = syncHistoryWithStore(browserHistory, store);\r\n\r\nserviceWorker.unregister();\r\n\r\nconst component = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <Router history={history}>\r\n                {routes}\r\n            </Router>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(component, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}